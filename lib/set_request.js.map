{"version":3,"sources":["../src/set_request.js"],"names":["isFunction","checkStatus","errorFn","parseData","progressFn","successFn","readyState","addError","xhr","err","addEventListener","evt","error","message","addProgress","prog","check_prog","loaded","total","lengthComputable","addReadyState","stateChange","resolve","reject","suc","XMLHttpRequest","obj","progress","get","open","state","url","send","data","JSON","stringify"],"mappings":"AAAA,SAAQA,UAAR,QAAyB,QAAzB;;AAEA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,OAAOC,SAAP,MAAsB,SAAtB;AACA,OAAOC,UAAP,MAAuB,gBAAvB;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AACA,OAAOC,UAAP,MAAuB,eAAvB;;AAEA,SAASC,QAAT,CAAkBC,GAAlB,EAAuBC,GAAvB,EAA2B;AACzBD,MAAIE,gBAAJ,CAAqB,OAArB,EAA8B,UAASC,GAAT,EAAa;AACzCF,4BAAsBE,IAAIC,KAAJ,CAAUC,OAAhC;AACD,GAFD;;AAIAL,MAAIE,gBAAJ,CAAqB,OAArB,EAA8B,UAASC,GAAT,EAAa;AACzCF,4BAAsBE,IAAIC,KAAJ,CAAUC,OAAhC;AACD,GAFD;AAGD;;AAED,SAASC,WAAT,CAAqBN,GAArB,EAA0BO,IAA1B,EAA+B;AAC7B,MAAIC,aAAaZ,WAAWW,IAAX,CAAjB;AACAP,MAAIE,gBAAJ,CAAqB,UAArB,EAAiC,UAASC,GAAT,EAAa;AAC5CK,eAAWL,IAAIM,MAAf,EAAuBN,IAAIO,KAA3B,EAAkCP,IAAIQ,gBAAtC;AACD,GAFD;AAGD;;AAED,SAASC,aAAT,CAAuBZ,GAAvB,EAA4Ba,WAA5B,EAAwC;AACtCb,MAAIE,gBAAJ,CAAqB,kBAArB,EAAyC,YAAU;AACjDW,gBAAYb,GAAZ;AACD,GAFD;AAGD;;AAED,eAAe,UAASc,OAAT,EAAkBC,MAAlB,EAAyB;AACtC,MAAId,YAAJ;AAAA,MAASY,oBAAT;AAAA,MAAsBG,YAAtB;AACA,MAAMhB,MAAM,IAAIiB,cAAJ,EAAZ;AACAhB,QAAMP,QAAQqB,MAAR,EAAgBpB,SAAhB,CAAN;AACAqB,QAAMnB,UAAUiB,OAAV,EAAmBnB,SAAnB,CAAN;AACAkB,gBAAcf,WAAWkB,GAAX,EAAgBf,GAAhB,EAAqBR,WAArB,CAAd;;AAEAM,WAASC,GAAT,EAAcC,GAAd;AACAW,gBAAcZ,GAAd,EAAmBa,WAAnB;;AAEA,MAAMK,MAAM;AACVC,cAAU,kBAASZ,IAAT,EAAc;AACtB,UAAI,CAACf,WAAWe,IAAX,CAAL,EAAuB,OAAOW,GAAP;AACvBZ,kBAAYN,GAAZ,EAAiBO,IAAjB;AACA,aAAOW,GAAP;AACD,KALS;AAMRE,SAAK;AAAA,aAAIpB,GAAJ;AAAA,KANG;AAORqB,UAAM,cAASC,KAAT,EAAgBC,GAAhB,EAAoB;AAC1BvB,UAAIqB,IAAJ,CAASC,KAAT,EAAgBC,GAAhB,EAAqB,IAArB;AACA,aAAOL,GAAP;AACD,KAVS;AAWRM,UAAM,cAASA,KAAT,EAAc;AACpB,UAAIC,OAAQD,KAAD,GAASE,KAAKC,SAAL,CAAeH,KAAf,CAAT,GAAgC,IAA3C;AACAxB,UAAIwB,IAAJ,CAASC,IAAT;AACD;AAdS,GAAZ;;AAiBA,SAAOP,GAAP;AACD","file":"set_request.js","sourcesContent":["import {isFunction} from 'lodash';\n\nimport checkStatus from './check_status';\nimport errorFn from './create_error';\nimport parseData from './parse';\nimport progressFn from './set_progress';\nimport successFn from './create_success';\nimport readyState from './ready_state';\n\nfunction addError(xhr, err){\n  xhr.addEventListener('error', function(evt){\n    err(`Network Error: ${evt.error.message}`);\n  });\n\n  xhr.addEventListener('abort', function(evt){\n    err(`Network Abort: ${evt.error.message}`);\n  });\n}\n\nfunction addProgress(xhr, prog){\n  let check_prog = progressFn(prog);\n  xhr.addEventListener('progress', function(evt){\n    check_prog(evt.loaded, evt.total, evt.lengthComputable);\n  });\n}\n\nfunction addReadyState(xhr, stateChange){\n  xhr.addEventListener('readystatechange', function(){\n    stateChange(xhr);\n  });\n}\n\nexport default function(resolve, reject){\n  let err, stateChange, suc;\n  const xhr = new XMLHttpRequest();\n  err = errorFn(reject, parseData);\n  suc = successFn(resolve, parseData);\n  stateChange = readyState(suc, err, checkStatus);\n\n  addError(xhr, err);\n  addReadyState(xhr, stateChange);\n\n  const obj = {\n    progress: function(prog){\n      if (!isFunction(prog)) return obj;\n      addProgress(xhr, prog);\n      return obj;\n    }\n    , get: ()=>xhr\n    , open: function(state, url){\n      xhr.open(state, url, true);\n      return obj;\n    }\n    , send: function(send){\n      let data = (send) ? JSON.stringify(send) : null;\n      xhr.send(data);\n    }\n  };\n\n  return obj;\n};\n"]}